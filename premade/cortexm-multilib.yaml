#{DEST: cortex-m/multilib.yaml}
#{LICENSE: NON-CMSIS}

# This is was adapted from a test YAML file found at "clang/test/Driver/baremetal-multilib.yaml"
# and the documentation at "clang/docs/Multilib.rst".
# Many of the below comments come directly from that test file.
#
# -----
#
# This file is in two parts:
# 1. A list of library variants.
# 2. A mapping from flags generated from command line arguments to further
#    flags.

# How does clang use this file?
# 1. If the ToolChain class for the architecture supports this form of
#    multilib it then it loads the file if present in sysroot.
# 2. Generate flags from the user provided arguments.
#    Use `clang -print-multi-flags-experimental` to see which flags are
#    generated. That option will remove the '-experimental' bit at some point.
# 3. Compare the arguments against each regular expression and store
#    associated flags if there's a match.
# 4. Find the last library variant whose flags are a subset of the
#    flags derived from the user provided arguments.
# 5. Use the directory for the library variant as the sysroot.

# Clang will emit an error if this number is greater than its current multilib
# version or if its major version differs, but will accept lesser minor
# versions.
MultilibVersion: 1.0

# The first section of the file is the list of library variants.
# A library is considered compatible if the are a subset of the flags derived
# from the arguments provided by the user.
# If multiple libraries are deemed compatible then the one that appears
# last in the list wins. A ToolChain may instead opt to use more than one
# multilib, layered on top of each other.

# LLVM appends '/lib' to these directories when looking for the libraries.
Variants:
- Dir: v6m/nofp
  Flags: [--target=thumbv6m-unknown-none-eabi, -mfpu=none]

- Dir: v8m.base/nofp
  Flags: [--target=thumbv8m.base-unknown-none-eabi, -mfpu=none]

- Dir: v7m/nofp
  Flags: [--target=thumbv7m-unknown-none-eabi, -mfpu=none]

- Dir: v7em/nofp
  Flags: [--target=thumbv7em-unknown-none-eabi, -mfpu=none]

- Dir: v8m.main/nofp
  Flags: [--target=thumbv8m.main-unknown-none-eabi, -mfpu=none]

- Dir: v8.1m.main/nofp/nomve
  Flags: [--target=thumbv8.1m.main-unknown-none-eabi, -mfpu=none]

- Dir: v7em/fpv4-sp-d16
  Flags: [--target=thumbv7em-unknown-none-eabihf, -mfpu=fpv4-sp-d16]

- Dir: v7em/fpv5-d16
  Flags: [--target=thumbv7em-unknown-none-eabihf, -mfpu=fpv5-d16]

- Dir: v8m.main/fpv5-sp-d16
  Flags: [--target=thumbv8m.main-unknown-none-eabihf, -mfpu=fpv5-sp-d16]

- Error: This multilib set does not yet have support for Armv8m.main with a 64-bit FPU
  Flags: [--target=thumbv8m.main-unknown-none-eabihf, -mfpu=fpv5-d16]

- Dir: v8.1m.main/nofp/mve
  Flags: [--target=thumbv8.1m.main-unknown-none-eabihf, -march=thumbv8.1m.main+mve, -mfpu=none]

- Dir: v8.1m.main/fp-armv8-fullfp16-d16/nomve
  Flags: [--target=thumbv8.1m.main-unknown-none-eabihf, -mfpu=fp-armv8-fullfp16-d16]

- Dir: v8.1m.main/fp-armv8-fullfp16-d16/mve
  Flags: [--target=thumbv8.1m.main-unknown-none-eabihf, -march=thumbv8.1m.main+mve.fp, -mfpu=fp-armv8-fullfp16-d16]



# The second section of the file is a map from auto-detected flags
# to custom flags. The auto-detected flags can be printed out
# by running clang with `-print-multi-flags-experimental`.
# The regex must match a whole flag string.
# All flags in the "Flags" list will be added if an argument matches.
Mappings:

# Handle potential later v8m baseline versions, like v8.1m baseline.
- Match: --target=thumbv8(\.[0-9]+)?m\.base-unknown-none-eabi
  Flags: [--target=thumbv8m.base-unknown-none-eabi]

# Match versions after v8.1m.main. We assume that v8.2m (if/when it exists) will
# be backwards compatible with v8.1m.
# The alternative is to not recognise later versions, and require that
# this multilib spec is updated before it can be used with newer
# architecture versions.
- Match: --target=thumbv8\.[1-9]m\.main-unknown-none-eabi
  Flags: [--target=thumbv8.1m.main-unknown-none-eabi]
- Match: --target=thumbv8\.[1-9]m\.main-unknown-none-eabihf
  Flags: [--target=thumbv8.1m.main-unknown-none-eabihf]

# Look for "+mve.fp" and "+mve" in the list of architecture extension flags.
- Match: -march=thumbv8\.[1-9]m\.main.*\+mve\.fp($|\+).*
  Flags: [-march=thumbv8.1m.main+mve.fp]
- Match: -march=thumbv8\.[1-9]m\.main.*\+mve($|\+).*
  Flags: [-march=thumbv8.1m.main+mve]

# Hierarchy among FPUs: fpvN-d16 is a superset of fpvN-sp-d16, and
# fpvN-d16 is a superset of fpv[N-1]-d16, for all N.
- Match: -mfpu=fpv5-d16
  Flags:
  - -mfpu=vfpv4-d16
  - -mfpu=fpv5-sp-d16
  - -mfpu=fpv4-sp-d16
- Match: -mfpu=fpv5-sp-d16
  Flags:
  - -mfpu=fpv4-sp-d16
- Match: -mfpu=fpv4-d16
  Flags:
  - -mfpu=fpv4-sp-d16
